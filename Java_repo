import java.util.*;
public class BibliotecaJH
{
   public static double biggestTwo(double a, double b){
     //returns the biggest of two numbers
       return (a + b + Math.abs(a - b))/2;
   }

   public static double biggestThree(double a, double b, double c){
     //returns the biggest of three numbers
        double aEb = (a + b + Math.abs(a - b))/2;
        if (aEb > c) {
            return aEb;
        } else {
            return c;
        }
   }

   public static double biggest3(double a, double b, double c){
     //another way of returning the biggest of 3 numbers
        if (a > b) {
            if (a > c){
                return a;
            } else {
                return c;
            }
        } else {
            if (b>c){
                return b;
            } else {
                return c;
            }
        }
   }

   public static void bhaskara (String args[]){
     //calculates the bhaskara formule
        Scanner read = new Scanner(System.in);
        System.out.println("\fType a");
        double a = read.nextDouble();
        System.out.println("Type b");
        double b = rad.nextDouble();
        System.out.println("Type c:");
        double c = read.nextDouble();
        if (a == 0){
            System.out.println("Not a second degree function");
        } else{
           double delta = (b*b) - (4*a*c);
           if (delta < 0){
               System.out.println("Doesn't have a root");
            } else {
                double x1 = (-b + Math.sqrt(delta))/(2*a);
                double x2 = (-b - Math.sqrt(delta))/(2*a);
                System.out.println("x1= " + Math.round(x1) + " x2= " + Math.round(x2));
            }
        }
    }

   public static int reverseNumber(int number){
     //reverses the order of a number
       int cent = number/100;
       int rest = number%100;
       int ten = rest/10;
       int unit = rest%10;
       int result = (unit * 100) + (ten * 10) + (cent * 1);
       return result;
    }

   public static double squareArea (double side){
     //returns the area of a square
        return side*side;
    }

   public static double rectangleArea (double side1, double side2){
     //receives both sides of the rectangle and multiplies them
        return side1*side2;
    }

   public static double circleArea (double radius){
     //receives the radius of a circle and returns the area
        return Math.PI*radius*radius;

    }

   public static double triangleArea (double base, double height){
     //receives the base and height of a triangle and returns its area
        return (base*height)/2.;
    }

   public static double parallelepipedVolume(double side1, double side2,double side3){
     //receives tne three sides of a parallelepiped and returns the volume
        return (side1*side2*side3);
    }

   public static double pyramidVolume(double baseSide1,double baseSide2,double height){
     //receives the base sides and the height of a pyramid and returns the volume
        return (baseSide1*baseSide2*height)/3.;
    }

   public static double cilinderVolume(double radius,double height){
     //receives the base radius and the height of a cilinder and returns its volume
        return (Math.PI*Math.pow(radius,2)*height);
    }

   public static double sphereVolume(double radius){
     //receives the radius of a sphere and returns its volume
        return (4*Math.PI*Math.pow(radius,3)/3);
    }

   public static double parallelepipedSurface(double side1, double side2,double side3){
     // returns the surface area of a parallelepiped
        return (2*side1*side2+2*side1*side3+2*side2*side3);
    }

   public static double pyramidSurface(double baseSide1,double baseSide2,double height){
     //receives the base sides and the height of a pyramid and returns its surface area
        double heightSide1 = Math.sqrt( Math.pow(baseSide1/2.,2) + Math.pow(height,2));
        double heightSide2 = Math.sqrt( Math.pow(baseSide2/2.,2) + Math.pow(height,2));
        double areaTriangle1 = (heightSide1*heightSide1)/2.;
        double areaTriangle2 = (heightSide2*heightSide2)/2.;
        return (2*(areaTriangle1)+2*(areaTriangle2)+ baseSide1*baseSide2);
    }

   public static double cilinderSurface(double radius,double height){
     //receives the base radius and the height of a cilinder and returns its surface area
        return (2*Math.PI*Math.pow(radius,2)+2*Math.PI*radius*height);
    }

   public static double sphereSurface(double radius){
     //receives the radius of a sphere and returns its volume
        return (4*Math.PI*Math.pow(radius,2));
    }
}
