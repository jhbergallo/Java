import java.util.*;
public class BibliotecaJH
{
   public static double biggestTwo(double a, double b){
     //returns the biggest of two numbers
       return (a + b + Math.abs(a - b))/2;
   }

   public static double biggestThree(double a, double b, double c){
     //returns the biggest of three numbers
        double aEb = (a + b + Math.abs(a - b))/2;
        if (aEb > c) {
            return aEb;
        } else {
            return c;
        }
   }

   public static double biggest3(double a, double b, double c){
     //another way of returning the biggest of 3 numbers
        if (a > b) {
            if (a > c){
                return a;
            } else {
                return c;
            }
        } else {
            if (b>c){
                return b;
            } else {
                return c;
            }
        }
   }

   public static void bhaskara (String args[]){
     //calculates the bhaskara formule
        Scanner read = new Scanner(System.in);
        System.out.println("\fType a");
        double a = read.nextDouble();
        System.out.println("Type b");
        double b = rad.nextDouble();
        System.out.println("Type c:");
        double c = read.nextDouble();
        if (a == 0){
            System.out.println("Not a second degree function");
        } else{
           double delta = (b*b) - (4*a*c);
           if (delta < 0){
               System.out.println("Doesn't have a root");
            } else {
                double x1 = (-b + Math.sqrt(delta))/(2*a);
                double x2 = (-b - Math.sqrt(delta))/(2*a);
                System.out.println("x1= " + Math.round(x1) + " x2= " + Math.round(x2));
            }
        }
    }

   public static int reverseNumber(int number){
     //reverses the order of a number
       int cent = number/100;
       int rest = number%100;
       int ten = rest/10;
       int unit = rest%10;
       int result = (unit * 100) + (ten * 10) + (cent * 1);
       return result;
    }

    public static int dividers(int num){
      //returns the number of dividers of a number
        int i = 0;
        for (int predecessor = 1; predecessor <= num; predecessor++){
            if (numero%antecessor == 0)
                i++;
        }
        return i;
   }

   public static void dividers1(int num){
     //returns the dividers of a number and their sum
       System.out.print("\f");
       int i = 0;
       int predecessor = 1;

       while (predecessor <= num){
           if (num%predecessor == 0){
               i++;
               System.out.print(predecessor + " ");
           }
           antecessor++;
       }
       System.out.println("\n" + i);
   }

    public static void dividersSum(int num){
      //receives a number and returns its dividers and the amount of dividers
       System.out.print("\f");
       int i = 0;
       int antecessor = 1;
       int sum = 0;
       while (predecessor <= num){
           if (num%predecessor == 0){
               i++;
               sum = predecessor + sum;
           }
           predecessor++;
       }
       System.out.println(sum);
       System.out.println("\n" + i);
   }

    public static int sumFor(int num){
      //receives a number and return the sum of its dividers using for loop
       int i = 0;
       int sum = 0;
       for (int predecessor = 1; predecessor <= num; predecessor++){
           if (num%predecessor == 0){
               i++;
               sum = antecessor + sum;
           }
       }
       return sum;
   }

    public static boolean evenOdd(int num){
      //boolean method to see if a number is even or odd
        if(num%2==0){
          return true;
        } else {
          return false;
        }
    }

     public static void evenOdd2(int num){
       //same method as above but using void instead

        if(num%2==0){
           System.out.print("The number is even");
        } else{
           System.out.print("The number is odd");
        }
    }

    public static boolean divider(int num1, int num2){
       //returns true or false if num2 is divisible by num1
        if(num2%num1==0){
            return true;
        } else {
            return false;
        }
    }

    public static boolean multiple(int num1, int num2){
      //returns true or false if num2 is a multiple of num2
        if(num1%num2==0){
            return true;
        } else
            return false;
          }
    }

    public static void ascendingOrder(int num1, int num2, int num3){
      //receives three numbers and returns them in ascending order
        if(num1 < num2 && num1 < num3 && num2 < num3) {System.out.print(num1 + "," + num2 + " e " + num3);}
            else if(num1 < num2 && num1 < num3 && num3 < num2){ System.out.print(num1 + "," + num3 + " e " + num2);}
            else if(num2 < num1 && num2 < num3 && num1 < num3){ System.out.print(num2 + "," + num1 + " e " + num3);}
            else if(num2 < num1 && num2 < num3 && num3 < num2){ System.out.print(num2 + "," + num3 + " e " + num1);}
            else if(num3 < num1 && num3 < num2 && num2 < num3){ System.out.print(num3 + "," + num2 + " e " + num3);}
            else if(num3 < num1 && num3 < num2 && num3 < num2){ System.out.print(num3 + "," + num3 + " e " + num2);}
            else { System.out.print("\fThere are equal numbers");}
    }

    public static void descendingOrder(int num1, int num2, int num3){
      //receives three numbers and returns them in descending order
        if(num1 > num2 && num1 > num3 && num2 > num3){ System.out.print(num1 + "," + num2 + " e " + num3);}
        else if(num1 > num2 && num1 > num3 && num3 > num2){ System.out.print(num1 + "," + num3 + " e " + num2);}
        else if(num2 > num1 && num2 > num3 && num1 > num3){ System.out.print(num2 + "," + num1 + " e " + num3);}
        else if(num2 > num1 && num2 > num3 && num3 > num2){ System.out.print(num2 + "," + num3 + " e " + num1);}
        else if(num3 > num1 && num3 > num2 && num2 > num3){ System.out.print(num3 + "," + num2 + " e " + num3);}
        else if(num3 > num1 && num3 > num2 && num3 > num2){ System.out.print(num3 + "," + num1 + " e " + num2);}
        else { System.out.print("\fThere are equal numbers");}
    }

   public static void sign(int day, int month){
     //receives a day and a month and returns the zodiac sign of that date
        if(day >= 21 && month == 3 || day <=20 && month == 4){       System.out.print("Aries");}
        else if(day >= 21 && month == 4  || day <=20 && month == 5){ System.out.print("Taurus");}
        else if(day >= 21 && month == 5  || day <=20 && month == 6){ System.out.print("Gemini");}
        else if(day >= 21 && month == 6  || day <=21 && month == 7){ System.out.print("Cancer");}
        else if(day >= 22 && month == 7  || day <=22 && month == 8){ System.out.print("Leo");}
        else if(day >= 23 && month == 8  || day <=21 && month == 9){ System.out.print("Virgo");}
        else if(day >= 22 && month == 9  || day <=22 && month == 10){System.out.print("Libra");}
        else if(day >= 23 && month == 10 || day <=21 && month == 11){System.out.print("Scorpion");}
        else if(day >= 22 && month == 11 || day <=21 && month == 12){System.out.print("Sagittarius");}
        else if(day >= 22 && month == 12 || day <=20 && month == 1){ System.out.print("Capricorn");}
        else if(day >= 22 && month == 1  || day <=19 && month == 2){ System.out.print("Aquarius");}
        else if(day >= 20 && month == 2  || day <=20 && month == 3){ System.out.print("Pisces");}

        else{ System.out.print("\fThe date is invalid.");}
   }

   public static void vowels(String args[]){
     //returns the amount of vowels and consonants of a name
       Scanner in = new Scanner(System.in);
       System.out.println("\fType in the name");
       String name = in.nextLine();
       System.out.println("The typed name was " + name);
       name = name.replaceAll(" ", "").toLowerCase();
       int vowels = 0;
       int consonants = 0;
       int nameLength = name.length();
       for (int i = 0; i < nameLength; i++){
           char letter = name.charAt(i);
           switch(letter){
               case 'a': vowels++;break;
               case 'e': vowels++;break;
               case 'i': vowels++;break;
               case 'o': vowels++;break;
               case 'u': vowels++;break;
            }
        }
       consonants = nameLength - vowels;
       System.out.println("The typed name has " + vowels + " vowels and " + consonants + " consonants.");
   }

   public static double squareArea (double side){
     //returns the area of a square
        return side*side;
    }

   public static double rectangleArea (double side1, double side2){
     //receives both sides of the rectangle and multiplies them
        return side1*side2;
    }

   public static double circleArea (double radius){
     //receives the radius of a circle and returns the area
        return Math.PI*radius*radius;

    }

   public static double triangleArea (double base, double height){
     //receives the base and height of a triangle and returns its area
        return (base*height)/2.;
    }

   public static double parallelepipedVolume(double side1, double side2,double side3){
     //receives tne three sides of a parallelepiped and returns the volume
        return (side1*side2*side3);
    }

   public static double pyramidVolume(double baseSide1,double baseSide2,double height){
     //receives the base sides and the height of a pyramid and returns the volume
        return (baseSide1*baseSide2*height)/3.;
    }

   public static double cilinderVolume(double radius,double height){
     //receives the base radius and the height of a cilinder and returns its volume
        return (Math.PI*Math.pow(radius,2)*height);
    }

   public static double sphereVolume(double radius){
     //receives the radius of a sphere and returns its volume
        return (4*Math.PI*Math.pow(radius,3)/3);
    }

   public static double parallelepipedSurface(double side1, double side2,double side3){
     // returns the surface area of a parallelepiped
        return (2*side1*side2+2*side1*side3+2*side2*side3);
    }

   public static double pyramidSurface(double baseSide1,double baseSide2,double height){
     //receives the base sides and the height of a pyramid and returns its surface area
        double heightSide1 = Math.sqrt( Math.pow(baseSide1/2.,2) + Math.pow(height,2));
        double heightSide2 = Math.sqrt( Math.pow(baseSide2/2.,2) + Math.pow(height,2));
        double areaTriangle1 = (heightSide1*heightSide1)/2.;
        double areaTriangle2 = (heightSide2*heightSide2)/2.;
        return (2*(areaTriangle1)+2*(areaTriangle2)+ baseSide1*baseSide2);
    }

   public static double cilinderSurface(double radius,double height){
     //receives the base radius and the height of a cilinder and returns its surface area
        return (2*Math.PI*Math.pow(radius,2)+2*Math.PI*radius*height);
    }

   public static double sphereSurface(double radius){
     //receives the radius of a sphere and returns its volume
        return (4*Math.PI*Math.pow(radius,2));
    }
}
